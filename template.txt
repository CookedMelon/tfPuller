
I will give you an api description copy. Extract constraints for each parameter.
First, I want you to know that, for each parameters, you should extract contraints in 7 categories, in which each your parameters #must# have 'dtype':
1. structure: data structure of the parameter, e.g., list, tuple.you #must# choose from the ones listed here:[list,lists,array,arrays,tuple,dict,dictionary,iterable,sequence,ndarray,array_like,vector,vectors,tf.sparsetensor,tf.tensor,sparsetensor,tensors,tensor]
2. dtype : data type of the parameter or the elements of structure,the dtype #must# choose from the ones listed here:[ float64,tf.qint8,tf.int64,tf.float,qint8,tf.float32,tf.qint16,tf.bfloat16,tf.complex128,bool,ints,complex128,float32,tf.dtypes,floats,uint,tf.uint64,half,quint16,float16,tf.uint8,uint32,tf.quint16,tf.uint,qint16,double,tf.boolean,tf.dtype,tf.int,numeric,tf.bool,str,quint8,tf.int32,float,strings,tf.half,uint64,string,tf.str,tf.complex,boolean,int64,complex,uint8,tf.string,bfloat16,int8,tf.uint16,integer,tf.float16,floating,tf.quint8,tf.uint32,int,tf.qint32,tf.complex64,qint32,int16,complex64,uint16,tf.int16,int32,integers,tf.float64,tf.int8 ]
3. shape: shape of the parameter
4. ndim: number of dimension of the parameter
5. range: valid range of the parameter or the elements of structure
6. enum: enumerated values (e.g., "parameter padding can only be one of 'zeros', 'border', and 'reflection'.")
If you understand, please return yes.



Second, You should give me an yaml in this format:
inputs
©¸©¤©¤©¤ required
©¦   ©¸©¤©¤©¤ <required_param1>
©¦   ©¸©¤©¤©¤ <required_param2>
©¦   ©¸©¤©¤©¤ ...
©¸©¤©¤©¤ optional
    ©¸©¤©¤©¤ <optional_param1>
    ©¸©¤©¤©¤ <optional_param1>
    ©¸©¤©¤©¤ ...

constraints
©¸©¤©¤©¤<optional_param1>
©¦   ©¸©¤©¤©¤ descp: <description of the parameter, parsed from the document>
©¦   ©¸©¤©¤©¤ doc_dtype: <dtype of the parameter, parsed from the document>
©¦   ©¸©¤©¤©¤ default: <default value of the parameter, parsed from the document>
©¦   ©¦
©¦   ©¦  # the following information are all constraints extracted by DocTer
©¦   ©¦
©¦   ©¸©¤©¤©¤ dtype: 
©¦   ©¦     # Constraint: a list of valid dtype
©¦   ©¦     ©¸©¤©¤©¤ <dtype1>
©¦   ©¦	    ©¸©¤©¤©¤ <dtype2>
©¦   ©¦	    ©¸©¤©¤©¤ ...
©¦   ©¸©¤©¤©¤ structure: 
©¦   ©¦     # Constraint: a list of valid data structure
©¦   ©¦     ©¸©¤©¤©¤ <structure1>
©¦   ©¦	    ©¸©¤©¤©¤ <structure2>
©¦   ©¦	    ©¸©¤©¤©¤ ...
©¦   ©¸©¤©¤©¤ shape: 
©¦   ©¦     # Constraint: a list of valid shape
©¦   ©¦     ©¸©¤©¤©¤ <shape1>
©¦   ©¦	    ©¸©¤©¤©¤ <shape2>
©¦   ©¦	    ©¸©¤©¤©¤ ...
©¦   ©¸©¤©¤©¤ ndim: 
©¦   ©¦     # Constraint: a list of valid ndim (number of dimension)
©¦   ©¦     #  represented as integers or other variations.
©¦   ©¦	    #  (belongs to the "shape" category as presented in the paper)
©¦   ©¦     ©¸©¤©¤©¤ <ndim1>
©¦   ©¦	    ©¸©¤©¤©¤ <ndim2>
©¦   ©¦	    ©¸©¤©¤©¤ ...
©¦   ©¸©¤©¤©¤ range: 
©¦   ©¦     # Constraint: a list of valid range (belongs to the "valid value" category as presented in the paper)	
©¦   ©¦     ©¸©¤©¤©¤ <range1>
©¦   ©¦	    ©¸©¤©¤©¤ <range2>
©¦   ©¦	    ©¸©¤©¤©¤ ...
©¦   ©¸©¤©¤©¤ enum: 
©¦        # Constraint: a list of enumerated values (belongs to the "valid value" category as presented in the paper)
©¦         ©¸©¤©¤©¤ <enum1>
©¦ 	      ©¸©¤©¤©¤ <enum2>
©¦ 	      ©¸©¤©¤©¤ ...
©¸©¤©¤©¤<optional_param2>
©¦         ...
©¸©¤©¤©¤<required_param1>
©¦	  ...
©¸©¤©¤©¤<required_param2>
	  ...


dependency:
   # the placeholder variables
    ©¸©¤©¤©¤ <dependency_variable1>
    ©¸©¤©¤©¤ <dependency_variable2>
If you understand, please return yes.






Third, I'll give you an example of the API description I want to extract, you don't have to extract constrains from it, because I'll give an corresponding manually extracted constrains in the fourth part, all you should do is learning how to generate the constraints yaml I want. If you understand what I said, please return yes.

Here is the example API description of tf.dtypes.complex

"""
args:
  imag: A Tensor. Must have the same type as real.
  name: A name for the operation (optional).
  real: 'A Tensor. Must be one of the following types: float32, float64.'
name: tf.dtypes.complex
returns: A Tensor of type complex64 or complex128.
url: https://www.tensorflow.org/api_docs/python/tf/dtypes/complex
"""

If you understand, please return yes and we'll move into the fourth part, and I'll give you the corresponding manually extracted constrains.





Fourth, I'll give you the corresponding manually extracted constrains, you should learn how to generate the constraints yaml I want, and after that, when I give you other API description, you should extract the constraints like the example.

Here is the manually extracted constrains of tf.dtypes.as_dtype:

"""
inputs:
  required:
    - imag
    - real
  optional:
    - name

constraints:
  imag:
    descp: A Tensor. Must have the same type as real.
    dtype:
      - tf.float32
      - tf.float64
  real:
    descp: A Tensor. Must be one of the following types: float32, float64.
    dtype:
      - tf.float32
      - tf.float64
  name:
    descp: A name for the operation (optional).
    dtype:
      - tf.string

returns:
  descp: A Tensor of type complex64 or complex128.
  dtype:
    - tf.complex64
    - tf.complex128

"""

If you have learned how to generate the constraints yaml I want, please return yes and I'll give you other API description.





++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Here is the API description that I want to extract constraints from. Please give me the constraints like the example.

"""
args:
  name: A name prefix for the returned tensors (optional).
  perm: A permutation vector of the dimensions of sp_input.
  sp_input: The input SparseTensor.
name: tf.sparse.transpose
returns: A transposed SparseTensor.
url: https://www.tensorflow.org/api_docs/python/tf/sparse/transpose
"""




Welldone, here is another API description that I want to extract constraints from. Please give me the constraints like the example.

"""
args:
  name: A name prefix for the returned tensors (optional)
  sp_input: A SparseTensor with values property of type int32 orint64.
  vocab_size: A scalar int64 Tensor (or Python int) containing the new sizeof the
    last dimension, all(0 <= sp_input.values < vocab_size).
name: tf.sparse.to_indicator
returns: A dense bool indicator tensor representing the indices with specified value.
url: https://www.tensorflow.org/api_docs/python/tf/sparse/to_indicator
"""
